local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local ClientBridge = game:GetService("ReplicatedStorage").ClientBridge
local DragControlIer = ClientBridge.DragControlIer
local serverSeeds = {}
local clientSeeds = {}

for _, func in pairs(getgc()) do
    if type(func) == "function" and islclosure(func) then
        local source = getfenv(func).script
        local constants = getconstants(func)
        local nextInt = table.find(constants, "NextInteger")
        local seed = nextInt and constants[nextInt - 1]
        if seed and typeof(seed) == "number" then
            clientSeeds[source.Name] = seed
        elseif source and source:IsDescendantOf(game) then
            for _, upvalue in pairs(getupvalues(func)) do
                if typeof(upvalue) == "Random" then
                    serverSeeds[source.Name] = upvalue
                    break
                end
            end
        end
    end
end

function getSeed(property)
    return serverSeeds[property]:NextInteger(0, clientSeeds[property])
end

function copy(part, cFrame)
    local clone = Player.Backpack:FindFirstChild("Clone")
    if clone then
        clone.Parent = Player.Character
        task.wait()
    end
    local success, key, part = DragControlIer:InvokeServer("GetKey", part, true)
    if success then
        DragControlIer.Update:FireServer("Update", key, cFrame)
        DragControlIer.Update:FireServer("ClearKey", key)
    end
    if clone then
        clone.Parent = Player.Backpack
    end
    return success and part
end

function edit(part, property, ...)
    local brush = Player.Backpack:FindFirstChild("Brush")
    if brush then
        brush.Parent = Player.Character
        task.wait()
    end
    local arguments = {part}
    for i, argument in pairs(table.pack(...)) do
        if type(i) == "number" then
            table.insert(arguments, argument)
        end
    end
    if type(arguments[#arguments]) ~= "table" then
        table.insert(arguments, {})
    end
    table.insert(arguments, getSeed(property))
    ClientBridge:FindFirstChild((property == "CFrame" and "Move") or property):FireServer(unpack(arguments))
    if brush then
        brush.Parent = Player.Backpack
    end
end

local property = "Resize"

local character = Player.Character

local part
for _, brick in pairs(workspace.Map.Bricks["Rocket Parts"].Parts:GetChildren()) do
    if brick.Shape == Enum.PartType.Cylinder then
        part = copy(brick, character.Head.CFrame)
        break
    end
end
edit(part, property, Vector3.new(5, 1, 1), character.Head.CFrame, {{ClassName = "Weld", Part0 = character.Head, Part1 = character.Torso, C0 = CFrame.new(0, 0, 0), C1 = CFrame.new()}})
edit(part, property, Vector3.new(5, 1, 1), character["Left Arm"].CFrame, {{ClassName = "Weld", Part0 = character["Left Arm"], Part1 = character.Torso, C0 = CFrame.new(0, 0, 0), C1 = CFrame.new()}})
edit(part, property, Vector3.new(5, 1, 1), character["Right Arm"].CFrame, {{ClassName = "Weld", Part0 = character["Right Arm"], Part1 = character.Torso, C0 = CFrame.new(0, 0, 0), C1 = CFrame.new()}})
edit(part, property, Vector3.new(5, 1, 1), character["Left Leg"].CFrame, {{ClassName = "Weld", Part0 = character["Left Leg"], Part1 = character.Torso, C0 = CFrame.new(0, 0, 0), C1 = CFrame.new()}})
edit(part, property, Vector3.new(5, 1, 1), character["Right Leg"].CFrame, {{ClassName = "Weld", Part0 = character["Right Leg"], Part1 = character.Torso, C0 = CFrame.new(0, 0, 0), C1 = CFrame.new()}})
